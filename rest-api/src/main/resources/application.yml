spring:
  threads:
    virtual:
      enabled: true
  jpa:
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  datasource:
    url: jdbc:postgresql://localhost:5432/social_db
    username: ${DB_USER}
    password: ${DB_PASSWORD}
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: ${GOOGLE_CLIENT_ID}
            clientSecret: ${GOOGLE_CLIENT_SECRET}
            scope: profile, email
          keycloak:
            client-id: ${KEYCLOAK_CLIENT_ID}
            client-secret: ${KEYCLOAK_CLIENT_SECRET}
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/keycloak
            scope:
              - openid
        provider:
          keycloak:
            issuer-uri: 'http://localhost:9080/realms/kudconnect'
            authorization-uri: 'http://localhost:9080/realms/kudconnect/protocol/openid-connect/auth'
            token-uri: 'http://localhost:9080/realms/kudconnect/protocol/openid-connect/token'
            user-info-uri: 'http://localhost:9080/realms/kudconnect/protocol/openid-connect/userinfo'
app:
  jwt:
    # Signing key for HS512 algorithm
    # In http://www.allkeysgenerator.com/ you can generate all kinds of keys
    secret: ${JWT_SECRET}
    expiration:
      minutes: 10
  oauth2:
    redirectUri: http://localhost:3000/oauth2/redirect
  cors:
    allowed-origins: http://localhost:3000

